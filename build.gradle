/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // Apply the lombok plugin to simplify boilerplate
    id 'io.freefair.lombok' version '5.3.0'

    // Code static analysis tools
    id 'checkstyle'
    id 'jacoco'

    // Build tools for distribution
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'edu.sc.seis.launch4j' version '2.4.9'
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'org.processing:core:3.3.7'

    // Use JUnit test framework
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.7.0'

    // Use Mockito mocks and stubs
    testImplementation 'org.mockito:mockito-core:2.+'

    // Use Hamcrest matchers
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

application {
    // Define the main class for the application.
    mainClassName = 'brick.breaker.App'
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

checkstyle {
  toolVersion '8.36'
  showViolations = true
}

launch4j {
  outfile = 'BrickBreaker.exe'
  mainClassName = project.mainClassName
  copyConfigurable = project.tasks.shadowJar.outputs.files
  jar = "lib/${project.tasks.shadowJar.archiveName}"
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled true
  }

  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: ['**/App.*'])
    }))
  }
}
